#Program: Pima Indians Diabetes Database
#Version: 1.0
#Developer: Emiliano Vivas Rodr√≠guez
#Contact: a01424732@tec.mx
#Since: 2022/09/16

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from statistics import mode
import matplotlib.pyplot as plt
from sklearn.metrics import plot_confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import RobustScaler
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
import time
tabla = pd.read_excel("Diabetes.xlsx")
tablaHealthy = tabla.groupby("Diabetes").get_group("Healthy")
tablaSick = tabla.groupby("Diabetes").get_group("Sick")
PREHealthy = tablaHealthy["Pregnancies"]
PRESick = tablaSick["Pregnancies"]
print("Pregnancies")
print("El valor minimo obtenido de la tabla Pregnancies para una persona sana es: %s"% PREHealthy.min())
print("El valor maximo obtenido de la tabla Pregnancies para una persona sana es: %s \n"% PREHealthy.max())
print("El valor minimo obtenido de la tabla Pregnancies para una persona enferma es: %s"% PRESick.min())
print("El valor maximo obtenido de la tabla Pregnancies para una persona enferma es: %s \n"% PRESick.max())
print("El valor de la media del valor Pregnancies para una persona sana es: ", PREHealthy.mean())
print("El valor de la media del valor Pregnancies para una persona enferma es: %0.3f \n" % PRESick.mean())
print("El valor de la moda del valor Pregnancies para una persona sana es: %s"% mode(PREHealthy))
print("El valor de la moda del valor Pregnancies para una persona enferma es: %s \n\n"% mode(PRESick))
PGHealthy = tablaHealthy["PG Concentration"]
PGSick = tablaSick["PG Concentration"]
print("PG Concentration")
print("El valor minimo obtenido de la tabla PG Concentration para una persona sana es: %s"% PGHealthy.min())
print("El valor maximo obtenido de la tabla PG Concentration para una persona sana es: %s \n"% PGHealthy.max())
print("El valor minimo obtenido de la tabla PG Concentration para una persona enferma es: %s"% PGSick.min())
print("El valor maximo obtenido de la tabla PG Concentration para una persona enferma es: %s \n"% PGSick.max())
print("El valor de la media del valor PG Concentration para una persona sana es: ", PGHealthy.mean())
print("El valor de la media del valor PG Concentration para una persona enferma es: %0.3f \n" % PGSick.mean())
print("El valor de la moda del valor PG Concentration para una persona sana es: %s"% mode(PGHealthy))
print("El valor de la moda del valor PG Concentration para una persona enferma es: %s \n\n"% mode(PGSick))
BPHealthy = tablaHealthy["Diastolic BP"]
BPSick = tablaSick["Diastolic BP"]
print("Diastolic BP")
print("El valor minimo obtenido de la tabla Diastolic BP para una persona sana es: %s"% BPHealthy.min())
print("El valor maximo obtenido de la tabla Diastolic BP para una persona sana es: %s \n"% BPHealthy.max())
print("El valor minimo obtenido de la tabla Diastolic BP para una persona enferma es: %s"% BPSick.min())
print("El valor maximo obtenido de la tabla Diastolic BP para una persona enferma es: %s \n"% BPSick.max())
print("El valor de la media del valor Diastolic BP para una persona sana es: ", BPHealthy.mean())
print("El valor de la media del valor Diastolic BP para una persona enferma es: %0.3f \n" % BPSick.mean())
print("El valor de la moda del valor Diastolic BP para una persona sana es: %s"% mode(BPHealthy))
print("El valor de la moda del valor Diastolic BP para una persona enferma es: %s \n\n"% mode(BPSick))
TFTHealthy = tablaHealthy["Tri Fold Thick"]
TFTSick = tablaSick["Tri Fold Thick"]
print("Tri Fold Thick")
print("El valor minimo obtenido de la tabla Tri Fold Thick para una persona sana es: %s"% TFTHealthy.min())
print("El valor maximo obtenido de la tabla Tri Fold Thick para una persona sana es: %s \n"% TFTHealthy.max())
print("El valor minimo obtenido de la tabla Tri Fold Thick para una persona enferma es: %s"% TFTSick.min())
print("El valor maximo obtenido de la tabla Tri Fold Thick para una persona enferma es: %s \n"% TFTSick.max())
print("El valor de la media del valor Tri Fold Thick para una persona sana es: ", TFTHealthy.mean())
print("El valor de la media del valor Tri Fold Thick para una persona enferma es: %0.3f \n" % TFTSick.mean())
print("El valor de la moda del valor Tri Fold Thick para una persona sana es: %s"% mode(TFTHealthy))
print("El valor de la moda del valor Tri Fold Thick para una persona enferma es: %s \n\n"% mode(TFTSick))
SIHealthy = tablaHealthy["Serum Ins"]
SISick = tablaSick["Serum Ins"]
print("Serum Ins")
print("El valor minimo obtenido de la tabla Serum Ins para una persona sana es: %s"% SIHealthy.min())
print("El valor maximo obtenido de la tabla Serum Ins para una persona sana es: %s \n"% SIHealthy.max())
print("El valor minimo obtenido de la tabla Serum Ins para una persona enferma es: %s"% SISick.min())
print("El valor maximo obtenido de la tabla Serum Ins para una persona enferma es: %s \n"% SISick.max())
print("El valor de la media del valor Serum Ins para una persona sana es: ", SIHealthy.mean())
print("El valor de la media del valor Serum Ins para una persona enferma es: %0.3f \n" % SISick.mean())
print("El valor de la moda del valor Serum Ins para una persona sana es: %s"% mode(SIHealthy))
print("El valor de la moda del valor Serum Ins para una persona enferma es: %s \n\n"% mode(SISick))
BMIHealthy = tablaHealthy["BMI"]
BMISick = tablaSick["BMI"]
print("Serum Ins")
print("El valor minimo obtenido de la tabla Serum Ins para una persona sana es: %.0f"% BMIHealthy.min())
print("El valor maximo obtenido de la tabla Serum Ins para una persona sana es: %.1f \n"% BMIHealthy.max())
print("El valor minimo obtenido de la tabla Serum Ins para una persona enferma es: %.0f"% BMISick.min())
print("El valor maximo obtenido de la tabla Serum Ins para una persona enferma es: %.1f \n"% BMISick.max())
print("El valor de la media del valor Serum Ins para una persona sana es: ", BMIHealthy.mean())
print("El valor de la media del valor Serum Ins para una persona enferma es: %0.3f \n" % BMISick.mean())
print("El valor de la moda del valor Serum Ins para una persona sana es: %.0f"% mode(BMIHealthy))
print("El valor de la moda del valor Serum Ins para una persona enferma es: %.1f \n\n"% mode(BMISick))
DPHealthy = tablaHealthy["DP Function"]
DPSick = tablaSick["DP Function"]
print("DP Function")
print("El valor minimo obtenido de la tabla DP Function para una persona sana es: %.3f"% DPHealthy.min())
print("El valor maximo obtenido de la tabla DP Function para una persona sana es: %.3f \n"% DPHealthy.max())
print("El valor minimo obtenido de la tabla DP Function para una persona enferma es: %.3f"% DPSick.min())
print("El valor maximo obtenido de la tabla DP Function para una persona enferma es: %.3f \n"% DPSick.max())
print("El valor de la media del valor DP Function para una persona sana es: %0.4f"% DPHealthy.mean())
print("El valor de la media del valor DP Function para una persona enferma es: %0.4f \n" % DPSick.mean())
print("El valor de la moda del valor DP Function para una persona sana es: %.3f"% mode(DPHealthy))
print("El valor de la moda del valor DP Function para una persona enferma es: %.3f \n\n"% mode(DPSick))
AGEHealthy = tablaHealthy["Age"]
AGESick = tablaSick["Age"]
print("Edad")
print("El valor minimo obtenido de la edad para una persona sana es: %s"% AGEHealthy.min())
print("El valor maximo obtenido de la edad para una persona sana es: %s \n"% AGEHealthy.max())
print("El valor minimo obtenido de la edad para una persona enferma es: %s"% AGESick.min())
print("El valor maximo obtenido de la edad para una persona enferma es: %s \n"% AGESick.max())
print("El valor de la media de la edad para una persona sana es: %0.3f"% AGEHealthy.mean())
print("El valor de la media de la edad para una persona enferma es: %0.3f \n" % AGESick.mean())
print("El valor de la moda de la edad para una persona sana es: %s"% mode(AGEHealthy))
print("El valor de la moda de la edad para una persona enferma es: %s \n\n"% mode(AGESick))
print("Enfermos - Sanos")
print("El numero de personas sanas es de: ", len(tablaHealthy))
print("El numero de personas enfermas es de: ", len(tablaSick), end='\n')
plt.subplot(331)
plt.pie([len(tablaHealthy),len(tablaSick)],labels=["Healthy","Sick"],autopct = "%0.0f%%")
plt.subplot(332)
plt.hist(tablaHealthy["Pregnancies"], bins = 20, ec="black")
plt.hist(tablaSick["Pregnancies"], bins = 20, ec="black")
plt.title("Pregnancies")
plt.ylabel("Frequency")
plt.subplot(333)
plt.hist(tablaHealthy["PG Concentration"], bins = 20, ec="black")
plt.hist(tablaSick["PG Concentration"], bins = 20,ec="black")
plt.title("PG Concentration")
plt.ylabel("Frequency")
plt.subplot(334)
plt.hist(tablaHealthy["Diastolic BP"], bins = 20, ec="black")
plt.hist(tablaSick["Diastolic BP"], bins = 20, ec="black")
plt.title("Diastolic BP")
plt.ylabel("Frequency")
plt.subplot(335)
plt.hist(tablaHealthy["Tri Fold Thick"], bins = 20, ec="black")
plt.hist(tablaSick["Tri Fold Thick"], bins = 20, ec="black")
plt.title("Tri Fold Thick")
plt.ylabel("Frequency")
plt.subplot(336)
plt.hist(tablaHealthy["Serum Ins"], bins = 20, ec="black")
plt.hist(tablaSick["Serum Ins"], bins = 20, ec="black")
plt.title("Serum Ins")
plt.ylabel("Frequency")
plt.subplot(337)
plt.hist(tablaHealthy["BMI"], bins = 20, ec="black")
plt.hist(tablaSick["BMI"], bins = 20, ec="black")
plt.title("BMI")
plt.ylabel("Frequency")
plt.subplot(338)
plt.hist(tablaHealthy["DP Function"], bins = 20, ec="black")
plt.hist(tablaSick["DP Function"], bins = 20, ec="black")
plt.title("DP Function")
plt.ylabel("Frequency")
plt.subplot(339)
plt.hist(tablaHealthy["Age"], bins = 20, ec="black")
plt.hist(tablaSick["Age"], bins = 20, ec="black")
plt.title("Age")
plt.ylabel("Frequency")
plt.show()
fig, axs = plt.subplots(3, 3)
axs[0, 0].boxplot([PREHealthy, PRESick], 1)
axs[0, 0].set_title('Pregnancies')
axs[0, 1].boxplot([PGHealthy, PGSick], 1)
axs[0, 1].set_title('PG Concentration')
axs[0, 2].boxplot([BPHealthy, BPSick], 1)
axs[0, 2].set_title('Diastolic BP')
axs[1, 0].boxplot([TFTHealthy, TFTSick], 1)
axs[1, 0].set_title('Tri Fold Thick')
axs[1, 1].boxplot([SIHealthy, SISick], 1)
axs[1, 1].set_title('Serum Ins')
axs[1, 2].boxplot([BMIHealthy, BMISick], 1)
axs[1, 2].set_title('BMI')
axs[2, 0].boxplot([DPHealthy, DPSick], 1)
axs[2, 0].set_title('DP Function')
axs[2, 1].boxplot([AGEHealthy, AGESick], 1)
axs[2, 1].set_title('Age')
axs[2, 2].boxplot([PREHealthy, PRESick], 1)
axs[2, 2].set_title("Pregnancies")
plt.show()
sickPopulation = {"Pregnancies":PRESick, "PG Concentration":PGSick, 'Diastolic BP':BPSick, 'Tri Fold Thick':TFTSick, 'Serum Ins':SISick, 'BMI':BMISick, 'DP Function':DPSick, 'Age':AGESick}
diabetes_df = pd.DataFrame(sickPopulation)
print(diabetes_df)
corr_df = diabetes_df.corr(method='pearson')
print("The correlation DataFrame is:")
print(corr_df, "\n")
sns.heatmap(corr_df, annot=True)
plt.show()
plt.scatter(sickPopulation["Pregnancies"], sickPopulation["Age"])
plt.xlabel("Pregnancies")
plt.ylabel("Age")
plt.title("Pregnancies vs. Age")
plt.show()
plt.scatter(sickPopulation["BMI"], sickPopulation["Tri Fold Thick"])
plt.xlabel("BMI")
plt.ylabel("Tri Fold Thick")
plt.title("BMI vs. Tri Fold Thick")
plt.show()
plt.scatter(sickPopulation["Serum Ins"], sickPopulation["Tri Fold Thick"])
plt.xlabel("Serum Ins")
plt.ylabel("Tri Fold Thick")
plt.title("Serum Ins vs. Tri Fold Thick")
plt.show()
plt.scatter(sickPopulation["Serum Ins"], sickPopulation["PG Concentration"])
plt.xlabel("Serum Ins")
plt.ylabel("PG Concentration")
plt.title("Serum Ins vs. PG Concentration")
plt.show()
plt.scatter(sickPopulation["Diastolic BP"], sickPopulation["Tri Fold Thick"])
plt.xlabel("Diastolic BP")
plt.ylabel("Tri Fold Thick")
plt.title("Diastolic BP vs. Tri Fold Thick")
plt.show()
plt.scatter(sickPopulation["Diastolic BP"], sickPopulation["Age"])
plt.xlabel("Diastolic BP")
plt.ylabel("Age")
plt.title("Diastolic BP vs. Age")
plt.show()
plt.scatter(sickPopulation["DP Function"], sickPopulation["Tri Fold Thick"])
plt.xlabel("DP Function")
plt.ylabel("Tri Fold Thick")
plt.title("Diastolic BP vs. Tri Fold Thick")
plt.show()
labels = {'Healthy' :0, 'Sick': 1}
tabla.replace({'Diabetes':labels}, inplace = True)
df2 = tabla.groupby(['Diabetes'])['Diabetes'].count()
print(df2)
X = tabla.drop('Diabetes', axis = 1).values
y = tabla['Diabetes'].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 123)
robust = RobustScaler()
X_train = robust.fit_transform(X_train)
X_test = robust.transform(X_test)
start = time.time()
#Logistic Regression
print("Regresi√≥n log√≠stica", end='\n')
lr = LogisticRegression(class_weight='balanced')
lr.fit(X_train, y_train)
end = time.time()
print(end - start)
y_pred = lr.predict(X_test)
reporte = classification_report(y_test, y_pred)
print(reporte)
CF = confusion_matrix(y_test, y_pred)
df_cf = pd.DataFrame(CF)
df_cf.style.background_gradient()
#Support vector machine
print("M√°quinas de vectores de soporte", end='\n')
start = time.time()
svc = SVC(kernel='linear')
svc.fit(X_train, y_train)
end = time.time()
print(end - start)
y_pred = svc.predict(X_test)
reporte = classification_report(y_test, y_pred)
print(reporte)
CF = confusion_matrix(y_test, y_pred)
print(CF)
plot_confusion_matrix(svc, X_test, y_test)
plt.show()
print("\n\n\n")
df_cf = pd.DataFrame(CF)
df_cf.style.background_gradient()
start = time.time()
svc = SVC(kernel='poly')
svc.fit(X_train, y_train)
end = time.time()
print(end - start)
y_pred = svc.predict(X_test)
reporte = classification_report(y_test, y_pred)
print(reporte)
CF = confusion_matrix(y_test, y_pred)
df_cf = pd.DataFrame(CF)
df_cf.style.background_gradient()
start = time.time()
svc = SVC(kernel='rbf')
svc.fit(X_train, y_train)
end = time.time()
print(end - start)
y_pred = svc.predict(X_test)
reporte = classification_report(y_test, y_pred)
print(reporte)
CF = confusion_matrix(y_test, y_pred)
df_cf = pd.DataFrame(CF)
df_cf.style.background_gradient()
start = time.time()
svc = SVC(kernel='sigmoid')
svc.fit(X_train, y_train)
end = time.time()
print(end - start)
y_pred = svc.predict(X_test)
reporte = classification_report(y_test, y_pred)
print(reporte)
CF = confusion_matrix(y_test, y_pred)
df_cf = pd.DataFrame(CF)
df_cf.style.background_gradient()
#KNN
print("K Vecinos m√°s cercanos", end='\n')
start = time.time()
neigh = KNeighborsClassifier(n_neighbors=5)
neigh.fit(X_train, y_train)
end = time.time()
print(end - start)
y_pred = neigh.predict(X_test)
neigh_train_acc = neigh.score(X_train, y_train)
print('Training Score: ', neigh_train_acc)
neigh_test_acc = neigh.score(X_test, y_test)
print('Testing Score: ', neigh_test_acc)
reporte = classification_report(y_test, y_pred)
print(reporte)
CF = confusion_matrix(y_test, y_pred)
df_cf = pd.DataFrame(CF)
df_cf.style.background_gradient()
start = time.time()
neigh = KNeighborsClassifier(n_neighbors=5)
neigh.fit(X_train, y_train)
end = time.time()
print(end - start)
y_pred = neigh.predict(X_test)
neigh_train_acc = neigh.score(X_train, y_train)
print('Training Score: ', neigh_train_acc)
neigh_test_acc = neigh.score(X_test, y_test)
print('Testing Score: ', neigh_test_acc)
reporte = classification_report(y_test, y_pred)
print(reporte)
CF = confusion_matrix(y_test, y_pred)
df_cf = pd.DataFrame(CF)
df_cf.style.background_gradient()
#Decision Tree
print("√Årbol de decisiones", end='\n')
start = time.time()
dtc = DecisionTreeClassifier(random_state=0, max_depth=10, criterion='entropy')
dtc.fit(X_train, y_train)
end = time.time()
print(end - start)
y_pred = dtc.predict(X_test)
dtc_train_acc = dtc.score(X_train, y_train)
print('Training Score: ', dtc_train_acc)
dtc_test_acc = dtc.score(X_test, y_test)
print('Testing Score: ', dtc_test_acc)
reporte = classification_report(y_test, y_pred)
print(reporte)
CF = confusion_matrix(y_test, y_pred)
df_cf = pd.DataFrame(CF)
df_cf.style.background_gradient()
#Random forest
print("Bosques aleatorios", end='\n')
start = time.time()
rf = RandomForestClassifier(max_depth=2, random_state=0)
rf.fit(X_train, y_train)
y_pred = rf.predict(X_test)
rf_train_acc = rf.score(X_train, y_train)
print('Training Score: ', rf_train_acc)
rf_test_acc = rf.score(X_test, y_test)
print('Testing Score: ', rf_test_acc)
reporte = classification_report(y_test, y_pred)
print(reporte)
CF = confusion_matrix(y_test, y_pred)
df_cf = pd.DataFrame(CF)
df_cf.style.background_gradient()
end = time.time()
print(end - start)
#Ada boost
print("Adaptive Boosting", end='\n')
start = time.time()
ada = AdaBoostClassifier(n_estimators=100, random_state=0)
ada.fit(X_train, y_train)
y_pred = ada.predict(X_test)
ada_train_acc = ada.score(X_train, y_train)
print('Training Score: ', ada_train_acc)
ada_test_acc = ada.score(X_test, y_test)
print('Testing Score: ', ada_test_acc)
reporte = classification_report(y_test, y_pred)
print(reporte)
CF = confusion_matrix(y_test, y_pred)
df_cf = pd.DataFrame(CF)
df_cf.style.background_gradient()
end = time.time()
print(end - start)